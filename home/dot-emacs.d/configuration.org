#+TITLE: emacs config with orgmode
#+AUTHOR: Daniel Tschertkow
#+EMAIL: daniel.tschertkow@posteo.de

#+STARTUP: overview

* package manager

Moved to init.el

BEGIN_SRC emacs-lisp
;; deactivated in favor of straight.el
;; package management config
;; (require 'package)
;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
;; (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
;; (package-initialize)

;; use-package through package.el
;; (unless (package-installed-p 'use-package)
;;   (package-refresh-contents)
;;   (package-install 'use-package))

END_SRC
* own functionality
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun set-c-indentation ()
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4))

  (defun dt/switch-theme (theme)
    ;; This interactive call is taken from `load-theme'
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapcar 'symbol-name
                                       (custom-available-themes))))))
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme theme t))

  (defun dt/rename-buffer ()
    "Rename buffer with current buffer name as default value.  Wrapper around 'rename-buffer'."
    (interactive)
    (rename-buffer
     (read-from-minibuffer "Rename buffer (to new name):  " (buffer-name) nil nil
                           nil nil nil)))

  (defun dt/open-cwd-in-kitty ()
    (interactive)
    (start-process "kitty" nil "/usr/bin/kitty" "--detach" "--directory" default-directory))

  (defun dt/anki-push-note (begin end)
    (interactive "r")
    (save-excursion
      (narrow-to-region begin end)
      (anki-editor-push-notes)
      (widen))))
#+END_SRC

* themes
#+BEGIN_SRC emacs-lisp
(use-package gotham-theme
  :straight t)

(use-package doom-themes
  :straight t)
#+END_SRC

* global config
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (prefer-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (global-auto-revert-mode t)

  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode 0)

  (when (fboundp 'native-compile-async)
    (setq comp-deferred-compilation t
          comp-deferred-compilation-black-list '("/mu4e.*\\.el$")))

  (setq native-comp-async-report-warnings-errors 'silent) ; emacs28 with native compilation

  :hook
  ;; prog-mode
  (prog-mode . display-line-numbers-mode)
  (scheme-mode . display-line-numbers-mode)
  (conf-mode . display-line-numbers-mode)
  (prog-mode . auto-revert-mode)

  ;; other
  (before-save . delete-trailing-whitespace)

  :config
  (defalias 'yes-or-no-p 'y-or-n-p)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

  (setq initial-scratch-message (concat ";; Daniel Tschertkow - " (format-time-string "%d-%m-%Y") "\n"))
  (setq default-directory "~/")
  (setq make-backup-files nil)

  ;; (add-to-list 'Info-directory-list "/home/dandy/.guix-profile/share/info")

  (global-visual-line-mode 1)
  (column-number-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (cond ((string= (system-name) "arch") (dt/switch-theme 'doom-horizon))
	(t (dt/switch-theme 'doom-gruvbox)))

  (add-to-list 'default-frame-alist '(alpha-background . 82))
  (set-face-attribute 'default nil :height 105 :font "JetBrains Mono" :weight 'normal))
#+END_SRC

* frames instead of windows
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  ;; behavior of opened and buffers
  ;; (setq pop-up-frames 'graphic-only)
  ;; (setq display-buffer-alist nil)


  ;; (add-to-list 'display-buffer-alist '("^magit:.*" display-buffer-at-bottom) t)
  (setq frame-auto-hide-function 'delete-frame)
  (setq mouse-autoselect-window nil)
  (setq focus-follows-mouse nil)

  (defun kill-frame-if-sole-buffer-killed ()
    "Kill a frame when it's buffer is killed and no other windows are displayed in this frame."
    (when window-system
      (let* ((current-buffer-window (get-buffer-window (current-buffer) 0))
             (buffer-frame (window-frame current-buffer-window))
             (window-count (length (window-list buffer-frame))))
        (when current-buffer-window ;; if buffer is displayed
          (if (eql window-count 1)
              (delete-frame buffer-frame)
            (delete-window current-buffer-window))))))
  :hook
  (kill-buffer . kill-frame-if-sole-buffer-killed)

  :custom
  (display-buffer-base-action '((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0)))
  (display-buffer-alist '(("^magit:.*" display-buffer-at-bottom)
                          ("^\\*org-roam\\*.*" display-buffer-at-bottom)
                          ("^\\*Org Links\\*.*" display-buffer-at-bottom)
                          ("^\\*Org Links\\*.*" display-buffer-at-bottom)
                          ("^\\*Warnings\\*.*" display-buffer-at-bottom)
                          ("^\\*Geiser Debug\\*.*" display-buffer-at-bottom)
                          ("^\\*Bookmark List\\*.*" (display-buffer-same-window display-buffer-pop-up-frame))))
  ;; (setq display-buffer-alist nil)
  )
#+END_SRC

* org-mode
** org
Notes:
- add new latex class: https://tex.stackexchange.com/q/204406
- good system for latex export: [[https://www.youtube.com/watch?v=0qHloGTT8XE][https://www.youtube.com/watch?v=0qHloGTT8XE]]
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook
  ((org-mode . turn-on-font-lock)
   (org-mode . org-indent-mode)
   (org-mode . company-mode))

  ;; :bind
  ;; ("C-c n t i". org-toggle-inline-images)
  ;;(("C-". org-download-clipboard))

  :config
  ;; org files
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/notes/captured-notes.org")
  (setq org-fold-core-style 'overlays) ;; for ctrlf search

  ;; org export will only use the minibuffer until ? is pressed
  (setq org-export-dispatch-use-expert-ui t)

  ;; general
  (set 'org-agenda-window-setup 'other-frame)
  (setq org-startup-folded "content") ; "fold", "nofold", "content", "showeverything"
  (setq org-startup-with-inline-images t)
  (add-to-list 'org-latex-packages-alist '("" "tabularx" nil))
  (add-to-list 'org-latex-packages-alist '("" "float" nil))

  ;; org will use frames
  (setq org-link-frame-setup
        (quote
         ((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file-other-frame)
          (wl . wl-other-frame))))
  (setq org-src-window-setup 'other-frame)
  (setq org-agenda-window-setup 'other-frame)


  ;; org babel
  (setq org-src-preserve-indentation t)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((awk . t)
                                 (shell . t)
                                 (python . t)
                                 (R . t)
                                 (emacs-lisp . t)
                                 (scheme . t)))

  ;; org latex
  (setq org-latex-compiler "pdflatex")
  ;;(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
  (plist-put org-format-latex-options :scale 1.7)
  (add-to-list 'org-latex-packages-alist
               '("AUTO" "babel" t ("pdflatex")))

  ;; unset keybindings
  (local-unset-key (kbd "C-c C-s"))
  (local-unset-key (kbd "C-c C-d")))
#+END_SRC
** org-babel-packages

#+BEGIN_SRC emacs-lisp
;; (use-package ob-go
;;   :straight t)
#+END_SRC

HTTP Requests mit cURL. Siehe [[https://github.com/zweifisch/ob-http][github.com/zweifisch/ob-http]].
#+BEGIN_SRC emacs-lisp
;; (use-package ob-http
;;   :straight t)
#+END_SRC

ob-web-fuzz: my first org babel package
problems with streight.el:
#+BEGIN_SRC emacs-lisp
;; (use-package ob-ffuf
;;   :straight (ob-ffuf :type git :host github :repo "daniel-ts/ob-ffuf")
;;   :config
;;   (setq ob-ffuf-command "/home/dandy/work/go/bin/ffuf"))
#+END_SRC

** org-cite
problems with streight.el:
#+BEGIN_SRC emacs-lisp
(use-package oc-biblatex
  :config
  (setq org-cite-export-processors
	'((latex biblatex)
	  (t basic))))
#+END_SRC

** org-downloadsd
Download und Paste von Bilder nach Orgmode.
[[https://github.com/abo-abo/org-download][Github docs]]
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :straight t
  :after org
  :config
  (org-download-enable)
  :bind (("C-c n d c" . org-download-clipboard)))
#+END_SRC

** org-export
Siehe hier: [[https://stackoverflow.com/questions/40566633/using-a-custom-latex-export-class-in-org-mode][https://stackoverflow.com/questions/40566633/using-a-custom-latex-export-class-in-org-mode]]

Problems with straight.el:
#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :config
    (setq org-latex-hyperref-template "")
    ;; article classes
    (add-to-list 'org-latex-classes
                 '("tubsartcl"
                   "\\documentclass[a4paper, 12pt, blue]{tubsartcl}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    ;; article classes
    (add-to-list 'org-latex-classes
                 '("tubsthesis"
                   "\\documentclass[german=true,thesistype=bachelor,nolistoffigures,nodate]{tubsthesis}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


    (add-to-list 'org-latex-classes
                 '("tubsbeamer"
                   "\\documentclass[fleqn,11pt,aspectratio=1610]{beamer}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\frame{%s}" . "\\frame*{%s}")))

    )
#+END_SRC

** org-roam
Org implementation of roam, a note taking and mindmapping application.
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight t
  :diminish org-roam-mode
  :custom
  (org-roam-directory "~/org/wiki/")
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:30}" 'face 'org-tag)))

  :init
  (setq org-roam-v2-ack t)

  :config
  (push 'company-capf company-backends)
  (org-roam-db-autosync-mode)

  :bind (("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n e" . org-roam-extract-subtree)
         ("C-c n b" . org-roam-buffer-toggle)
         ("C-c n a" . org-roam-alias-add)
         ("C-c n r" . org-roam-ref-add)
         ("C-c n t" . org-roam-tag-add)

         ("C-c n g r" . org-roam-ref-find) ; get reference

         ("C-c n k a" . org-roam-alias-remove) ; kill alias
         ("C-c n k r" . org-roam-ref-remove) ; kill reference
         ("C-c n k t" . org-roam-tag-remove) ; kill reference
	 ))
#+END_SRC

* applications and emacs addons
Packages that expand general emacs capabilites like TRAMP, dired etc.
** academic phrases
#+BEGIN_SRC emacs-lisp
(use-package academic-phrases
  :straight t)
#+END_SRC
** anki flash cards
Edit Anki Flash Cards like org-drill. See [[https://github.com/zilongshanren/anki-editor][github]]. See [[https://raw.githubusercontent.com/zilongshanren/anki-editor/master/examples.org][examples]].

Old and unmaintained.

BEGIN_SRC emacs-lisp
(use-package anki-editor
  :straight
  :config
  (setq anki-editor-create-decks t)
  (defun anki-editor--anki-connect-invoke! (orig-fun &rest args)
    (let ((request--curl-callback
           (lambda (proc event) (request--curl-callback "localhost" proc event))))
      (apply orig-fun args)))

  (advice-add 'anki-editor--anki-connect-invoke :around #'anki-editor--anki-connect-invoke!))
END_SRC

#+BEGIN_SRC emacs-lisp
(use-package anki-editor
  :straight (anki-editor :type git :host github :repo "orgtre/anki-editor")
  :bind
  ("C-c a p" . #'dt/anki-push-note)
  ("C-c a n" . (lambda (&optional prefix)
		 "Modified version of `anki-editor-insert-note'."
		 (interactive "P")
		 (let* ((deck (org-entry-get-with-inheritance anki-editor-prop-deck))
			(type "Einfach")
			(fields (anki-editor-api-call-result 'modelFieldNames
							     :modelName type))
			(heading "Item"))
		   (anki-editor--insert-note-skeleton prefix deck heading type fields))))
  :config
  (setq anki-editor-create-decks t))
#+END_SRC
** bookmarks
#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :hook
  (bookmark-after-jump . (lambda ()
                           (kill-buffer "*Bookmark List*")))
  (bookmark-bmenu-mode . (lambda ()
                           (local-unset-key (kbd "/"))
                           (local-unset-key (kbd "a"))
                           (local-unset-key (kbd "A"))
                           (local-unset-key (kbd "o"))

                           (local-set-key (kbd "j") #'next-line)
                           (local-set-key (kbd "k") #'previous-line)
                           (local-set-key (kbd "<return>") #'bookmark-bmenu-other-frame)
                           ))
  ;; (setq bookmark-bmenu-mode-hook nil)

  :config
  (defun bookmark-bmenu-list ()
    "Display a list of existing bookmarks.
The list is displayed in a buffer named `*Bookmark List*'.
The leftmost column displays a D if the bookmark is flagged for
deletion, or > if it is flagged for displaying.

Note: I customized this function to always pop-to-buffer."
    (interactive)
    (bookmark-maybe-load-default-file)
    (let ((buf (get-buffer-create bookmark-bmenu-buffer)))
      (with-current-buffer buf
        ;; (display-buffer buf '(display-buffer-same-window))
        (display-buffer buf)
        (bookmark-bmenu-mode)
        (bookmark-bmenu--revert))))

  :custom
  (bookmark-save-flag 1)
  (bookmark-default-file "~/.emacs.d/bookmarks")
  (bookmark-bmenu-file-column 40))
#+END_SRC

** Completion framework and buffer search
*** Selectrum, Prescient, ctrlf
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :straight t)

(use-package selectrum-prescient
  :straight t)

(use-package selectrum
  :straight t
  :init
  (selectrum-mode +1)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1)
  :config
  (setq prescient-filter-method 'regexp))

(use-package ctrlf
  :straight t
  :bind (:map ctrlf-mode-map
	 ("C-s" . ctrlf-forward-fuzzy-regexp)
	 ("C-r" . ctrlf-backward-fuzzy-regexp)
	 ("C-M-s" . ctrlf-forward-literal)
	 ("C-M-r" . ctrlf-backward-literal)
	 ("M-s _" . ctrlf-forward-regexp))

  :custom
  (ctrlf-auto-recenter t)
  :init
  (ctrlf-mode +1))
#+END_SRC
** d4-mode
#+BEGIN_SRC emacs-lisp
(use-package d4-mode
  :straight (d4-mode :type git :host github :repo "daniel-ts/d4-mode" :protocol ssh))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :straight t)
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :after dired)

(use-package dired-aux
  :after dired)

(use-package dired-hide-dotfiles
  :straight t
  :after dired)

(use-package dired-hacks
  :straight t)

(use-package dired
  :config
  (defun dt/dired-open-file ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (message "Opening %s..." file)
      (call-process "xdg-open" nil 0 nil file)
      (message "Opening %s done" file)))

  (local-unset-key (kbd "u"))
  (local-unset-key (kbd "U"))
  :bind
  ("C-< o" . dt/dired-open-file)

  :hook
  (dired-mode . dired-hide-dotfiles-mode)
  (dired-mode . (lambda ()
                  (local-set-key (kbd "z") #'dired-unmark)
                  (local-set-key (kbd "Z") #'dired-unmark-all-marks)
                  (local-set-key (kbd "H") #'dired-hide-details-mode)
                  (local-set-key (kbd "h") #'dired-hide-dotfiles-mode)
                  (local-set-key (kbd "<tab>") #'dired-subtree-cycle)
                  (local-set-key (kbd "I") #'dired-kill-subdir)
                  (local-set-key (kbd "RET")
                                 (lambda ()
                                   (interactive)
                                   (if (dired-nondirectory-p (thing-at-point 'filename))
                                       (dired-find-file-other-window)
                                     (let ((kill-buffer-hook nil))
                                       (dired-find-alternate-file)))))
                  (local-set-key (kbd "u")
                                 ;; #'dired-up-directory
                                 (lambda ()
                                   (interactive)
                                   (let ((buf (current-buffer)))
                                     (dired-up-directory)
                                     (kill-buffer buf))))))
  :custom
  (dired-listing-switches "--all -l --human-readable --group-directories-first"))


#+END_SRC
** docker
The ability to build the image directly (C-c C-b) from the buffer.
You can specify the image name in the file itself by adding a line like this at the top of your Dockerfile.
=##  docker-image-name: "your-image-name-here" -*-=
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :straight t
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
:straight t
:config
(exec-path-from-shell-initialize)
(exec-path-from-shell-copy-env "JAVA_HOME")
(exec-path-from-shell-copy-env "WAYLAND_DISPLAY")
(exec-path-from-shell-copy-env "DISPLAY")
(exec-path-from-shell-copy-env "WORKON_HOME")
(exec-path-from-shell-copy-env "XDG_SESSION_TYPE")
(exec-path-from-shell-copy-env "INFOPATH")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC
** flyspell
Use flyspell for spellchecking with an aspell backend.
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :straight t
  :hook latex-mode
  :config
  (setq ispell-list-command "--list")
  (setq flyspell-default-dictionary "de_DE"))
#+END_SRC
** guix
It does not work. I should install it through Guix.

(use-package guix
  :straight t)
  
** json-navigator
#+BEGIN_SRC emacs-lisp
;; (use-package json-navigator
;;   :straight t
;;   :config (require 'hierarchy))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t)
;; (use-package forge
;;   :straight t
;;   :after magit)
#+END_SRC

** nov epub reader
#+BEGIN_SRC emacs-lisp
(use-package nov
  :straight t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-text-width 80))
#+END_SRC
** openwith
Öffne Emacs-fremde Formate in einer externen Applikaton
#+BEGIN_SRC emacs-lisp
(use-package openwith
  :straight t
  :config
  (setq openwith-associations
            (list
             (list (openwith-make-extension-regexp
                    '("mpg" "mpeg" "mp3" "mp4"
                      "avi" "wmv" "wav" "mov" "flv"
                      "ogm" "ogg" "mkv"))
                   "vlc"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                   "libreoffice"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("pdf" "ps" "ps.gz" "dvi"))
                   "evince"
                   '(file))
             ))
  (openwith-mode 1))
#+END_SRC
** rainbow-mode
Visualize colors in their background
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :straight t)
#+END_SRC

** restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :straight t)

(use-package company-restclient
  :straight t)
#+END_SRC
** terminal
#+BEGIN_SRC emacs-lisp
;; (if (or (string= (system-name) "pad")
;; 	(string= (system-name) "arch"))
;;     (progn
;;       (use-package vterm
;; 	:straight t
;; 	:config
;; 	(setq vterm-kill-buffer-on-exit t)
;; 	(setq vterm-shell "/usr/bin/zsh"))

;;       (use-package multi-vterm
;; 	:straight t
;; 	:bind
;;   ("C-x t" . multi-vterm-next)
;;   ("C-x T" . multi-vterm)))

;;   (use-package sane-term
;;     :straight t
;;     :bind
;;     ("C-x t" . sane-term)
;;     ("C-x T" . sane-term-create)
;;     :config
;;     (setq sane-term-shell-command "/bin/bash")
;;     (setq sane-term-kill-on-exit t)
;;     (setq sane-term-next-on-kill t))
;;   )
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-default-method "ssh"))
#+END_SRC

Docker integration for TRAMP
#+BEGIN_SRC emacs-lisp
(use-package tramp-container)
#+END_SRC

** use-package chords
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :straight t
  :init (key-chord-mode 1))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :diminish which-key-mode
  :init
  (setq which-key-show-early-on-C-h t)
  (which-key-mode))

#+END_SRC

* general IDE features
more comfort in movement and visuals, autocompletions
** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :config
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (setq company-idle-delay 0.3)
  :hook
  (prog-mode . company-mode)
  (scheme-mode . company-mode)
  :diminish (company-mode . " ©"))
#+END_SRC

** crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :straight t
  :bind
  ("C-a" . crux-move-beginning-of-line)
  ("C-c e r" . crux-eval-and-replace)
  )
#+END_SRC

** eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :config
  (setq eglot-extend-to-xref t)
  (setq-default eglot-workspace-configuration
                '((:gopls .
                          ((staticcheck . t)
                           (matcher . "CaseSensitive")))))
  (add-to-list 'eglot-server-programs '(terraform-mode . ("terraform-lsp" "")))
  (add-to-list 'eglot-server-programs '(css-mode . ("vscode-html-languageserver" "--stdio")))

  :hook
  (go-mode . eglot-ensure)
  (python-mode . eglot-ensure)

  :bind (:map eglot-mode-map
        ("M-l <tab>" . complete-at-point)
	    ("M-l s" . eglot-code-actions)
	    ("M-l d" . eldoc-doc-buffer)
        ("M-l r" . eglot-rename)
        ("M-l v" . eglot-format)

	    ("M-l f d" . xref-find-definitions-other-frame)
	    ("M-l f r" . xref-find-references)
	    ("M-l f i" . eglot-find-implementation)
        ("M-l f t" . eglot-find-typeDefinition)
        ("M-l f f" . eglot-find-declaration)

        ("M-l e e" . flymake-goto-next-error)
        ("M-l e r" . flymake-goto-prev-error)))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :straight t
  :init
  (setq flycheck-flake8rc "~/.config/flake8/.flake8"))
#+END_SRC

** highlight-indent-guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :diminish highlight-indent-guides-mode
  :hook (prog-mode . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-auto-odd-face-perc 5)
  (setq highlight-indent-guides-auto-even-face-perc 5)
  (setq highlight-indent-guides-auto-character-face-perc 8))
#+END_SRC

** keyboard macros
#+BEGIN_SRC emacs-lisp
(use-package kmacro
  :chords
  ("z8" . kmacro-end-and-call-macro)
  ("Z(" . kmacro-call-ring-2nd)
  ("z9" . kmacro-cycle-ring-next)
  ("Z)" . kmacro-cycle-ring-previous)
  ("Z/" . kmacro-delete-ring-head)
  ("z7" . kmacro-edit-macro))
#+END_SRC

** lsp-mode
language server protocol support for emacs
#+begin_example
(use-package lsp-mode
  :straight t
  :hook
  (html-mode . lsp-deferred)
  (js2-mode . lsp-deferred)
  (python-mode . lsp-deferred)
  (java-mode . lsp-deferred)
  (c-mode . lsp-deferred)
  (cpp-mode . lsp-deferred)
  (lsp-mode . lsp-enable-which-key-integration)
  (lsp-mode . company-mode)
  (lsp-mode . (lambda ()
		(local-set-key (kbd "M-l") 'lsp-own-prefix)))
  (lsp-mode . (lambda ()
		(define-key lsp-own-prefix (kbd "<tab>") 'company-capf)))
  (lsp-mode . (lambda ()
		(define-key lsp-find-prefix (kbd "r") 'lsp-find-references)))
  :init
  (define-prefix-command 'lsp-own-prefix)
  (define-prefix-command 'lsp-ide-prefix)
  (define-prefix-command 'lsp-find-prefix)
  (define-prefix-command 'lsp-format-prefix)
  (define-prefix-command 'lsp-peek-prefix)

  :config
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-snippet t)
  (setq read-process-output-max (* 1024 1024))
  (setq gc-cons-threshold 100000000)
  (setq lsp-completion-provider :capf)
  (setq lsp-enable-file-watchers t)
  (setq lsp-enable-xref t)
  (setq lsp-enable-completion-at-point t)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;    CUSTOM LANG SERVERS    ;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection "/usr/bin/zls")
    :major-modes '(zig-mode)
    :server-id 'zls))

  :custom (lsp-modeline-build-code-actions-segments '(count icon))
  :bind-keymap
  ("M-l" . lsp-own-prefix)
  ("M-L" . lsp-command-map)
  :bind (:map lsp-own-prefix
	 ;; top-level keybindings
	 ("s" . lsp-ivy-workspace-symbol)
	 ("d" . lsp-describe-thing-at-point)
   ("r" . lsp-rename)
	 ;;("<tab>" . company-capf)

	 ;; prefixes
	 ("f" . lsp-find-prefix)
	 ("F" . lsp-format-prefix)
	 ("p" . lsp-peek-prefix)
	 ("i" . lsp-ide-prefix)

	 ;; map bindings
	 :map lsp-find-prefix
	 ("d" . lsp-find-definition)
	 ("r" . lsp-find-reference)
	 ("i" . lsp-find-implementation)
	 :map lsp-format-prefix
	 ("b" . lsp-format-buffer)
	 ("r" . lsp-format-region)
	 :map lsp-peek-prefix
	 ("d" . lsp-ui-peek-find-definitions)
	 ("r" . lsp-ui-peek-find-references)
	 :map lsp-ide-prefix
	 ("b" . lsp-headerline-breadcrumb-mode)
	 )
  )

(use-package lsp-ivy
  :straight t)

(use-package lsp-ui
  :straight t
  :hook (lsp-mode . lsp-ui-mode)
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-ignore-duplicate t)
  (setq lsp-ui-flycheck-enable t)
  :custom
  (lsp-ui-doc-enable . nil))


(use-package company-box
  :straight t
  :disabled
  :hook (company-mode . company-box-mode)
  :diminish company-box-mode)
#+end_example
** origami code folding
#+BEGIN_SRC emacs-lisp
;; (use-package origami
;;   :straight t
;;   :hook (prog-mode . origami-mode)
;;   :chords (("4r" . origami-toggle-node)
;;            ("4t" . origami-show-only-node)))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight t
  :init
  (setq projectile-indexing-method 'native)
  (setq projectile-sort-order 'modification-time)
  (setq projectile-enable-caching t)
  (setq projectile-mode-line-prefix " Π")
  (setq projectile-dynamic-mode-line nil)
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :straight t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** registers
#+BEGIN_SRC emacs-lisp
(use-package register
  :chords
  ("Z=" . point-to-register)
  ("z0" . jump-to-register))
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :straight t
  :diminish smartparens-mode
  :hook
  ((prog-mode . smartparens-mode)
   (org-mode . smartparens-mode)
   (conf-mode . smartparens-mode)
   (markdown-mode . smartparens-mode)
   (geiser-repl-mode . smartparens-mode))
  :config
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "_" "_" :actions '(wrap))
  (sp-local-pair 'org-mode "=" "=" :actions '(wrap)))
#+END_SRC

** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :straight t
  :chords
  ("U(" . undo-tree-redo)
  ("u8" . undo-tree-undo)
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode 1)
  (setq undo-tree-auto-save-history nil))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:straight t
:diminish yas-minor-mode
:config
(add-to-list 'yas-snippet-dirs "~/.config/emacs/yasnippets")
(yas-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet
:straight t
:bind ("M-+" . ivy-yasnippet)
:config
(setq ivy-yasnippet-expand-keys 'never))
#+END_SRC

* languages
** C/C++
cc-mode is the overarching mode for all c-like languages, includeing Java and Awk.
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :init
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (c++-mode . "stroustrup")
			      (c-mode . "stroustrup")
                          (other . "linux"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package c++-mode
  :hook (c++-mode . eglot-ensure))
#+END_SRC

** Caddy
#+BEGIN_SRC emacs-lisp
(use-package caddyfile-mode
  :straight t
  :init
  (defun my-caddyfile-hook ()
    (setq-local tab-width 4)  ;; Default: 8
    (setq-local indent-tabs-mode nil))  ;; Default: t
  :mode (("Caddyfile\\'" . caddyfile-mode)
         ("caddy\\.conf\\'" . caddyfile-mode))
  :hook
  ((caddyfile-mode . my-caddyfile-hook)))
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
:straight t
:mode ("\\.clj\\'"))

(use-package cider
:straight t
:config
(add-hook 'cider-mode-hook #'eldoc-mode)
(add-hook 'cider-repl-mode-hook #'eldoc-mode)
(add-hook 'cider-repl-mode-hook #'smartparens-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** CMake
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :straight t)
#+END_SRC
** elisp
#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :hook
  (emacs-lisp-mode . display-fill-column-indicator-mode)
  :bind
  ("C-c s s" . sp-forward-slurp-sexp)
  ("C-c s f" . sp-forward-parallel-sexp)
  ("C-c s u" . sp-up-sexp)
  ("C-c s d" . sp-down-sexp)
  ("C-c s m" . sp-mark-sexp)
  ("C-c s a" . sp-beginning-of-sexp)
  ("C-c s e" . sp-end-of-sexp)
  ("C-c s h" . sp-highlight-current-sexp))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package package-lint
  :straight t)
#+END_SRC

** Fish
#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :straight t)
#+END_SRC
** Go
You could consider Auto-Fill-Mode: Wrap lines according to fill-column automatically.

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :straight t
  :init
  ;; (defun lsp-go-install-save-hooks ()
  ;;   (add-hook 'before-save-hook #'lsp-format-buffer t t))
  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

  :hook
  (go-mode . eglot-format-buffer-on-save)
  (go-mode . set-c-indentation)
  (go-mode . flymake-mode)
  (go-mode . display-fill-column-indicator-mode)
  (go-mode . (lambda () (setq-default fill-column 80)))

   :config
   (defun project-find-go-module (dir)
     (when-let ((root (locate-dominating-file dir "go.mod")))
       (cons 'go-module root)))

   (cl-defmethod project-root ((project (head go-module)))
     (cdr project))

   (add-hook 'project-find-functions #'project-find-go-module))




(use-package company-go
  :straight t)
#+END_SRC
** JavaScript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :straight t
  :mode
  ("\\.js[mx]?\\'" . js2-mode)
  ("\\.tsx?\\'" . js2-mode)
  :diminish
  ((js2-mode . "js_ide")
   (js-mode . "js_iqde"))
  :config
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-no-semi-insertion nil)
  (setq js2-missing-semi-one-line-override t))
#+END_SRC

** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :straight t
  :after json-navigator
  :hook
  (json-mode . (lambda ()
		 (local-set-key (kbd "C-c n") #'json-navigator-navigate-after-point))))
#+END_SRC

** latex
taken from this reddit [[https:https://www.reddit.com/r/emacs/comments/cd6fe2/how_to_make_emacs_a_latex_ide/?utm_source=share&utm_medium=web2x][post]].
Unterschied zwischen tex-mode, latex-mode LaTeX-mode: Standard Emacs tex oder auctex. auctex ist besser: [[https://stackoverflow.com/questions/17777189/what-is-the-difference-of-tex-mode-and-latex-mode-and-latex-mode-in-emacs][siehe stackoverflow]].
#+BEGIN_SRC emacs-lisp

;; hier ist ein Fehler!
;; (use-package auctex-latexmk
;;   :straight t
;;   :config
;;   (auctex-latexmk-setup)
;;   (setq auctex-latexmk-inherit-Tex-PDF-mode t))

(use-package reftex
  :straight t
  :defer t
  :config
  (setq reftex-cite-prompt-optional-args t))

(use-package company-auctex
  :straight t
  :init
  (company-auctex-init))

(use-package latex-mode
  :ensure auctex
  :mode "\\.tex\\'"
  :hook
  ;; mixed-case ist hier wichtig (LaTeX). Siehe obere Links.
  (LaTeX-mode . reftex-mode)
  (LaTeX-mode . smartparens-mode)
  (LaTeX-mode . company-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . display-line-numbers-mode)
  (LaTeX-mode . (lambda()
		  (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
		  (setq TeX-command-default "XeLaTeX")
		  (setq TeX-save-query nil)
		  (setq TeX-show-compilation nil)

		  (setq my-TeX-outdir "OUT")
		  (add-to-list 'TeX-expand-list
			       `("%(OUTDIR)"
				 (lambda ()
				   (unless (file-directory-p my-TeX-outdir)
				     (make-directory my-TeX-outdir))
				   (cond ((or (eq TeX-engine 'xetex)
					      (eq TeX-engine 'luatex))
					 ,(concat "--output-directory=" my-TeX-outdir))

					 ((eq TeX-engine 'pdftex)
					  ,(concat "-output-directory " my-TeX-outdir))
					 (t
					  ,(concat "--output-directory=" my-TeX-outdir))))))
		  (add-to-list 'TeX-command-list
			       '("XeLaTeX OUTDIR" "%`xelatex%(mode)%' %(OUTDIR) %t" TeX-run-TeX nil t))
		  ))
  ;;(LaTeX-mode . TeX-fold-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  ;;(setq-default TeX-master nil)

  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-method 'synctex)
  (setq reftex-plug-into-AUCTeX t)
  ;; Update PDF buffers after successful LaTeX run
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+END_SRC

** nginx
See [[https://github.com/ajc/nginx-mode][nginx-mode]] on github

#+BEGIN_SRC emacs-lisp
(use-package nginx-mode
  :straight t
  :init
  (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
#+END_SRC

** nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :straight t
  :mode "\\.nix\\'"
  )
#+END_SRC

** other
*** systemd
#+BEGIN_SRC emacs-lisp
(use-package systemd
  :straight t
  :hook
  (systemd-mode . display-line-numbers-mode)
  (systemd-mode . highlight-indent-guides-mode)
  (systemd-mode . smartparens-mode)
  (systemd-mode . company-mode)
)
#+END_SRC
*** cleanup
Clean up mode line
#+BEGIN_SRC emacs-lisp
(eval-after-load "visual-line-mode" (diminish 'visual-line-mode))
(eval-after-load "eldoc-mode" (diminish 'eldoc-mode))
(eval-after-load "auto-revert-mode" (diminish 'auto-revert-mode))
#+END_SRC
*** urlenc
Percent encoding for urls. Convenient use with mitmproxy to encode payloads.
#+BEGIN_SRC emacs-lisp
(use-package urlenc
  :straight t
  :config
  (custom-set-variables '(urlenc:default-coding-system 'utf-8)))
#+END_SRC

** php
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :straight t
  :mode "\\.php\\'")
#+END_SRC

** Python
python-mode config
#+BEGIN_SRC emacs-lisp
(use-package python
  :hook
  (pyhton-mode . poetry-tracking-mode)
  (python-mode . (lambda ()
		   (local-set-key (kbd "C-c p") #'poetry)))
  :config
  (setq python-shell-interpreter "jupyter")
  (setq python-shell-interpreter-args "console --simple-prompt")
  (setq python-shell-prompt-detect-failure-warning t))
#+END_SRC

integration with jupyter notebooks
#+BEGIN_SRC emacs-lisp
(use-package ein
  :straight t)
#+END_SRC


[[https://python-poetry.org/docs/][Poetry]] is a python project manager
#+BEGIN_SRC emacs-lisp
(use-package poetry
  :straight t)
#+END_SRC
** scheme
Geiser: Lisp hacking environment
#+BEGIN_SRC emacs-lisp
(use-package geiser
  :straight t)

(use-package geiser-guile
  :straight t)
#+END_SRC

general lisp / scheme config:
#+BEGIN_SRC emacs-lisp
(use-package scheme-mode
  :mode "\\.scm\\'"
  :hook
  (scheme-mode . geiser-mode)
  :config
  (setq fill-column 78)
  (setq tab-width 8)
  (setq sentence-end-double-space t)
  (setq indent-tabs-mode nil)
  (put 'eval-when 'scheme-indent-function 1)
  (put 'call-with-prompt 'scheme-indent-function 1)
  (put 'test-assert 'scheme-indent-function 1)
  (put 'test-assertm 'scheme-indent-function 1)
  (put 'test-equalm 'scheme-indent-function 1)
  (put 'test-equal 'scheme-indent-function 1)
  (put 'test-eq 'scheme-indent-function 1)
  (put 'call-with-input-string 'scheme-indent-function 1)
  (put 'guard 'scheme-indent-function 1)
  (put 'lambda* 'scheme-indent-function 1)
  (put 'substitute* 'scheme-indent-function 1)
  (put 'match-record 'scheme-indent-function 2)

  ;; 'modify-phases' and its keywords.
  (put 'modify-phases 'scheme-indent-function 1)
  (put 'replace 'scheme-indent-function 1)
  (put 'add-before 'scheme-indent-function 2)
  (put 'add-after 'scheme-indent-function 2)

  (put 'modify-services 'scheme-indent-function 1)
  (put 'with-directory-excursion 'scheme-indent-function 1)
  (put 'package 'scheme-indent-function 0)
  (put 'origin 'scheme-indent-function 0)
  (put 'build-system 'scheme-indent-function 0)
  (put 'bag 'scheme-indent-function 0)
  (put 'graft 'scheme-indent-function 0)
  (put 'operating-system 'scheme-indent-function 0)
  (put 'file-system 'scheme-indent-function 0)
  (put 'manifest-entry 'scheme-indent-function 0)
  (put 'manifest-pattern 'scheme-indent-function 0)
  (put 'substitute-keyword-arguments 'scheme-indent-function 1)
  (put 'with-store 'scheme-indent-function 1)
  (put 'with-external-store 'scheme-indent-function 1)
  (put 'with-error-handling 'scheme-indent-function 0)
  (put 'with-mutex 'scheme-indent-function 1)
  (put 'with-atomic-file-output 'scheme-indent-function 1)
  (put 'call-with-compressed-output-port 'scheme-indent-function 2)
  (put 'call-with-decompressed-port 'scheme-indent-function 2)
  (put 'call-with-gzip-input-port 'scheme-indent-function 1)
  (put 'call-with-gzip-output-port 'scheme-indent-function 1)
  (put 'call-with-lzip-input-port 'scheme-indent-function 1)
  (put 'call-with-lzip-output-port 'scheme-indent-function 1)
  (put 'signature-case 'scheme-indent-function 1)
  (put 'emacs-batch-eval 'scheme-indent-function 0)
  (put 'emacs-batch-edit-file 'scheme-indent-function 1)
  (put 'emacs-substitute-sexps 'scheme-indent-function 1)
  (put 'emacs-substitute-variables 'scheme-indent-function 1)
  (put 'with-derivation-narinfo 'scheme-indent-function 1)
  (put 'with-derivation-substitute 'scheme-indent-function 2)
  (put 'with-status-report 'scheme-indent-function 1)
  (put 'with-status-verbosity 'scheme-indent-function 1)

  (put 'mlambda 'scheme-indent-function 1)
  (put 'mlambdaq 'scheme-indent-function 1)
  (put 'syntax-parameterize 'scheme-indent-function 1)
  (put 'with-monad 'scheme-indent-function 1)
  (put 'mbegin 'scheme-indent-function 1)
  (put 'mwhen 'scheme-indent-function 1)
  (put 'munless 'scheme-indent-function 1)
  (put 'mlet* 'scheme-indent-function 2)
  (put 'mlet 'scheme-indent-function 2)
  (put 'run-with-store 'scheme-indent-function 1)
  (put 'run-with-state 'scheme-indent-function 1)
  (put 'wrap-program 'scheme-indent-function 1)
  (put 'with-imported-modules 'scheme-indent-function 1)
  (put 'with-extensions 'scheme-indent-function 1)

  (put 'with-database 'scheme-indent-function 2)
  (put 'call-with-transaction 'scheme-indent-function 2)

  (put 'call-with-container 'scheme-indent-function 1)
  (put 'container-excursion 'scheme-indent-function 1)
  (put 'eventually 'scheme-indent-function 1)

  (put 'call-with-progress-reporter 'scheme-indent-function 1)

  ;; This notably ( in Paredit to not insert a space when the
  ;; preceding symbol is one of (eval . (modify-syntax-entry ?~ "'"))
  (modify-syntax-entry ?$ "'")
  (modify-syntax-entry ?+ "'")
  :custom
  (geiser-default-implementation 'guile))
#+END_SRC

** sonic-pi
connect to sonic pi
#+BEGIN_SRC emacs-lisp
(use-package sonic-pi
  :straight t
  :bind
  ("C-c C-l" . sonic-pi-send-buffer)
  :config
  (setq sonic-pi-path "/usr/lib/sonic-pi/"))

#+END_SRC

** svelte
#+BEGIN_SRC emacs-lisp
(use-package svelte-mode
  :straight t
  :mode "\\.svelte\\'"
  :config
  (setq svelte-display-submode-name t))
#+END_SRC

** terraform

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :straight t
  :bind
  :config
  (terraform-format-on-save-mode 1)
  (custom-set-variables '(terraform-indent-level 2)))
#+END_SRC

** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :straight t
  :mode ("\\.ts\\'" . typescript-mode)
  :hook (typescript-mode . eglot-ensure)
)
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
:straight t
:mode ("\\.ya?ml\\'")
:hook
(yaml-mode . display-line-numbers-mode)
(yaml-mode . highlight-indent-guides-mode)
(yaml-mode . smartparens-mode)
:config
(add-hook 'yaml-mode-hook
#'(lambda ()
(define-key yaml-mode-map "\C-m" 'newline-and-indent)))
)
#+END_SRC

*** ansible
#+BEGIN_SRC emacs-lisp
(use-package ansible-doc
  :straight t)
#+END_SRC
** zig
A very interesting, minimal, modern C like language. See [[https://ziglang.org/documentation/master][docs]].
#+BEGIN_SRC emacs-lisp
(use-package zig-mode
  :straight t
  :mode "\\.zig\\'")
#+END_SRC
* keybindings
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  ;; unset creation of keyboard macro
  (global-unset-key (kbd "C-x C-k"))

  ;; unset to-lower and to-upper keys
  (global-unset-key (kbd "M-l"))
  (global-unset-key (kbd "M-u"))

  ;; unset emacs news
  (global-unset-key (kbd "C-h n"))

  :bind
  ("C-x C-f" . find-file-other-frame)
  ("C-x d" . (lambda ()
               (interactive)
               (dired-other-frame default-directory)))
  ("C-x D" . dired-other-frame)
  ("C-x b" . (lambda (buf)
	       (interactive "B")
	       (let ((display-buffer-alist '((".*" display-buffer-pop-up-frame))))
		 (switch-to-buffer-other-frame buf))))
  ("C-x C-b" . switch-to-buffer)
  ("C-< t". dt/open-cwd-in-kitty)

  ("M-+" . ivy-yasnippet)

  ("C-< r". dt/rename-buffer)
  ("C-< v". toggle-truncate-lines)

  ("C-< c". (lambda ()
	      "open emacs configuration file 'configuration.org'"
	      (interactive)
	      (find-file-other-frame "~/.emacs.d/configuration.org")))

  ("C-< f u" . (lambda ()
		 (interactive)
		 (set-face-attribute 'default nil :height 120 :font "Inconsolata condensed" :weight 'normal)))

  ("C-< f s" . (lambda ()
		 (interactive)
		 (set-face-attribute 'default nil :height 90 :font "JetBrains Mono" :weight 'normal)))

  ("C-< f m" . (lambda ()
		 (interactive)
		 (set-face-attribute 'default nil :height 105 :font "JetBrains Mono" :weight 'normal)))

  ("C-< f l" . (lambda ()
		 (interactive)
		 (set-face-attribute 'default nil :height 130 :font "JetBrains Mono" :weight 'normal)))

  :chords
  ;; use em!
  ("o0" . comment-or-uncomment-region)
  )
#+END_SRC
